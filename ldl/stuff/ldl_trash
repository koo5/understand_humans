	
	/*
	,string_codes("raw_string_literal_body_item ++> \"\\\\\".", Input),
	gtrace
	,parse(Bootstrap0, statements, Input, [], Ast),writeq(Ast).
	*/
	
	
/*findall(
	_,
	(
		member(Nonterminal:Examples, All_Examples),
		member(E, Examples),
		(
			(
				E = ~X
			->
				writef('~w should not parse %t...'),
				(
					all_parses(G, Nonterminal, 
*/
%:- phrase(string(S), "arst"), writeq(S).
/*
:- phrase(
	(
		string_without("s", S1), string(S2)
	),
	"arst"
	), writeq((S1,S2)).

sss(S1, S2) --> string_without("s", S1), string(S2).
*/
%:- phrase(sss(S1, S2), "asd"), writeq((S1, S2)).




/*
todo, triples?
#alternative syntax for grammar is node_name, [ has syntax ", grammar_items.
*/




/*
statements ++> zero_or_more_separated_with(top_level_item, newline),
	newline ++> "\n",
	top_level_item ++> "",
	top_level_item ++> postprocessed(statement_with_period),
	statement_with_period ++> [statement, "."],
	top_level_item ++> comment,
	comment ++> ["#", all_chars_until_one_of("\n")],
	statement ++> grammar,
	grammar ++> [node_name, " ++> ", grammar_items],
	grammar_items ++> series_of_separated_with(grammar_item, ", "),
	grammar_item ++> string_literal,
	grammar_item ++> node_name,
	grammar_item ++> node_name_with_child_name,
	node_name_with_child_name ++> [child_name:node_name, ":", type_name:node_name],
	grammar_item ++> a_series_of_y_separated_with_z,
	a_series_of_y_separated_with_z ++> ["a series of ", item_type:grammar_item, " separated with ", separator:grammar_item],
	grammar_item ++> all_chars_until_one_of,
	all_chars_until_one_of ++> ("all chars until one of ", string_literal),

	grammar_item ++> any_char_except,
	any_char_except ++> ["any char except ", string_literal],

	grammar_item ++> postprocessed,
	postprocessed ++> ["postprocessed ", node_name],
	node_name ++> identifier,
	
	identifier ++> raw_identifier transformed_by identifier_from_parse_tree,
	raw_identifier ++> [valid_identifier_char, zero_or_more_separated_with(valid_identifier_char, "")],
	valid_identifier_char ++> any_char_except("\n\"\\,.: "),

	string_literal ++> transformed_by(raw_string_literal, string_from_parse_tree),

	raw_string_literal ++> ["\"", raw_string_literal_body, "\""],
	raw_string_literal_body ++> zero_or_more_separated_with(raw_string_literal_body_item, ""),

	% we refuse these 3 characters raw, only accept their escaped form
	raw_string_literal_body_item ++> any_char_except("\n\"\\"),
	raw_string_literal_body_item ++> "\\\n",
	raw_string_literal_body_item ++> "\\\"",
	raw_string_literal_body_item ++> "\\\\"

	*/
	
%parse(_, X, [X|Tail], Tail, X) :- integer(X), !.



%:- set_prolog_flag(double_quotes, codes).
/*body(5) --> [x].
:- listing(head/3).
%test0 :- debug,gtrace,
:- phrase(head(Y), Z),writeq((Y, Z)).*/
/*%newline ++> [\\n].
%:- phrase(newline, X), writeq(X).*/
/*
:- table top_level_items(_,_,_).

top_level_items([H|T]) --> top_level_item(H), top_level_items(T).
top_level_items([]) --> "".
top_level_item(x) --> comment.

:- listing(top_level_items/3).*/
/*:- debug,
gtrace,
phrase(top_level_items(T), "\n\n"), writeq((T)).*/
%:- phrase(top_level_items(T), "\n\n"), writeq((T)).

/*
statements ++> a series of top_level_item separated with newline.
newline --> "\n".

top_level_item ++> [].

top_level_item ++> builtin-postprocessed statement_with_period.
statement_with_period ++> statement, [.].
top_level_item ++> comment.


comment ++> [#], all chars until one of [\\n].

statement ++> grammar.
grammar ++> node_name, [ ++> ], grammar_items.
#alternative syntax for grammar is node_name, [ has syntax ], grammar_items.

grammar_items ++> a series of grammar_item separated with [, ].

grammar_item ++> string_literal.
grammar_item ++> node_name.

grammar_item ++> node_name_with_child_name.
node_name_with_child_name ++> child_name:node_name, [:], type_name:node_name.

grammar_item ++> a_series_of_y_separated_with_z.
a_series_of_y_separated_with_z ++> [a series of ], item_type:grammar_item, [ separated with ], separator:grammar_item.

grammar_item ++> all_chars_until_one_of.
all_chars_until_one_of ++> [all chars until one of ], string_literal.

grammar_item ++> any_char_except.
any_char_except ++> [any char except ], string_literal.

grammar_item ++> builtin_postprocessed.
builtin_postprocessed ++> [builtin-postprocessed ], node_name.

node_name ++> identifier.
identifier ++> builtin-postprocessed raw_identifier.
raw_identifier ++> valid_identifier_char, a series of valid_identifier_char separated with [].
valid_identifier_char ++> any char except [\\n\\[\\]\\\\,.: ].

string_literal ++> builtin-postprocessed raw_string_literal.
raw_string_literal ++> [\\[], raw_string_literal_body, [\\]].
raw_string_literal_body ++> a series of raw_string_literal_body_item separated with [].

raw_string_literal_body_item ++> any char except [\\n\\[\\]\\\\].
raw_string_literal_body_item ++> [\\\\n].
raw_string_literal_body_item ++> [\\\\\\[].
raw_string_literal_body_item ++> [\\\\\\]].
raw_string_literal_body_item ++> [\\\\\\\\].


{?raw ldl:postprocess ?cooked} <= {
    ?raw ldl:type "raw_string_literal"; ldl:children ([:value ?body]).
    ?cooked :eq [:key "string"; :value [a ldl:value; ldl:type "string"; ldl:contents ?v]].
    :dummy :series_of_literals_X_string (?body ?v).
}.
{?raw ldl:postprocess ?cooked} <= {
    ?raw ldl:type "raw_identifier"; ldl:children ([:value ?char] [:value ?chars]).
    ?cooked :eq [:key "string"; :value [a ldl:value; ldl:type "identifier"; ldl:contents ?v]].
    ?char :eq [ldl:contents ?v_head].
    :dummy :series_of_literals_X_string (?chars ?v_tail).
    ?v string_builtins:strXlst (?v_head ?v_tail).
}.
{?raw ldl:postprocess ?cooked} <= {
    ?raw ldl:type "statement_with_period"; ldl:children ([:value ?cooked] ?_period).
}.
{?raw ldl:postprocess ?cooked} <= {
    :dummy tau_builtins:output "ldl:postprocess exhausted on:".
    :dummy tau_builtins:serialize_thing ?raw.
    cut cut cut.
}.

{:dummy :series_of_literals_X_string (?series ?string)} <= {
    :dummy :is_collected_literals (?series ?strings).
    ?string string_builtins:strXlst ?strings.
}.

{:dummy :is_collected_literals (rdf:nil (""))} <= {}.

{:dummy :is_collected_literals (?r_ ?v_)} <= {
    ?rf :eq [ldl:contents ?vf].
    :dummy :is_collected_literals (?rr ?vr).
}.

*/

/*

expand Bootstrap into a proper grammar as would be obtained by parsing.

*/
/*
expanded([], []) :- !.
expanded([H|T], [EH|ET]) :-
	expanded(H, EH),
	expanded(T, ET), !.
expanded(
	Name:Type, 
	node{type:with_name, children:{name:Name, type:Type}}) :- !.
expanded(
	Lhs ++> Rhs, 
	node{type:grammar, children:{lhs:Lhs, rhs:Expanded_Rhs}}
) :-
	expanded(Rhs, Expanded_Rhs), !.
expanded(
	zero_or_more_separated_with(Item, Separator), 
	node{type:zero_or_more_separated_with, item:Item_E, separator:Separator_E}
) :-
	expanded(Item, Item_E),
	expanded(Separator, Separator_E), !.
expanded(X, X).
*/





%:- use_module(library(dcg/basics)).
%:- use_module(library(rdet)).

/*
:- rdet(parse/5).
:- rdet(parse_string/4).
*/




