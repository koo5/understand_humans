
statement_with_period ++> statement, ".".
module_body ++> zero or more top_level_item separated with newline.
newline ++> "\n".
top_level_item ++> "".
top_level_item ++> statement_with_period transformed by statement_from_parse_tree.
top_level_item ++> comment.
comment ++> "#", zero or more comment_char separated with "".
comment_char ++> any char except "\n".
statement ++> grammar.
grammar ++> lhs:identifier, " ++> ", rhs:rhs.
rhs ++> rhs_list transformed by rhs_list_from_parse_tree.
rhs_list ++> grammar_item, ", ", zero or more grammar_item separated with ", ".
rhs ++> grammar_item.
grammar_item ++> with_name.
with_name ++> name:identifier, ":", type:grammar_item.
grammar_item ++> zero_or_more_separated_with.
zero_or_more_separated_with ++> "zero or more ", item:grammar_item, " separated with ", separator:grammar_item.
grammar_item ++> all_chars_until_one_of.
all_chars_until_one_of ++> "all chars until one of ", string_literal.
grammar_item ++> any_char_except.
any_char_except ++> "any char except ", string_literal.
grammar_item ++> transformed.
transformed ++> node_type, " transformed by ", transformer:identifier.
grammar_item ++> node_type.
node_type ++> identifier.
identifier ++> raw_identifier transformed by identifier_from_parse_tree, .
raw_identifier ++> head:valid_identifier_char, rest:zero or more valid_identifier_char separated with "".
valid_identifier_char ++> any char except "\n\"\\,.: ".
grammar_item ++> string_literal.
string_literal ++> raw_string_literal transformed by string_from_parse_tree, .
raw_string_literal ++> "\"", raw_string_literal_body, "\"".
raw_string_literal_body ++> zero or more raw_string_literal_body_item separated with "".
raw_string_literal_body_item ++> any char except "\n\"\\".
raw_string_literal_body_item ++> "\\\"".
raw_string_literal_body_item ++> "\\\\".
raw_string_literal_body_item ++> "\\n".
